# ワークフローの名前
name: Deploy Frontend to Azure

# ワークフローが実行されるトリガー
on:
  # 1. GitHubのActionsタブから手動で実行できるようにする
  workflow_dispatch:
    inputs:
      level:
        description: "デプロイするレベル: LV"
        required: true
        default: "3"
        type: choice
        options: ["1", "2", "3"]

  # 2. メインブランチの特定ディレクトリにpushされたら自動実行
  push:
    branches: [main]
    paths:
      - ".github/workflows/deploy-frontend.yml"
      - "LV3/frontend/**"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # --- ファイル内で使える環境変数の定義 ---
    env:
      NODE_VERSION: "22.x"
      PNPM_VERSION: "10.x"
      # --- 動的な値もenvで定義可能 ---
      TARGET_LEVEL: LV${{ github.event.inputs.level || '3' }}
      # package.jsonのnameフィールドに合わせる (例: lv3-frontend)
      PACKAGE_NAME: lv${{ github.event.inputs.level || '3' }}-frontend
      # 対象パッケージのワーキングディレクトリパス
      WORKING_DIRECTORY: ${{ github.workspace }}/LV${{ github.event.inputs.level || '3' }}/frontend

    steps:
      # --- Step 1: ソースコードのチェックアウト ---
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Step 2: pnpmのインストール ---
      - name: Set up pnpm v${{ env.PNPM_VERSION }}
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      # --- Step 3: Node.jsのインストール ---
      - name: Set up Node.js v${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      # --- Step 4: 依存関係のインストール ---
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # --- Step 5: Next.jsアプリケーションのビルド ---
      - name: Build Next.js app
        run: pnpm --filter ${{ env.PACKAGE_NAME }} build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL_PRODUCTION }}

      # --- Step 6: 本番用パッケージを作成 ---
      - name: Create deploy output
        run: |
          STANDALONE_PROJECT_PATH=${{ env.WORKING_DIRECTORY }}/.next/standalone
          DEPLOY_ROOT=${{ env.WORKING_DIRECTORY }}/deploy-root

          mkdir -p "$DEPLOY_ROOT"

          # 1. 必要なディレクトリをdeploy-rootにコピー
          cp -r $STANDALONE_PROJECT_PATH/LV3/frontend/. "$DEPLOY_ROOT/"
          cp -r $STANDALONE_PROJECT_PATH/node_modules "$DEPLOY_ROOT/"
          # 2. static ディレクトリもコピー
          cp -r ${{ env.WORKING_DIRECTORY }}/.next/static "$DEPLOY_ROOT/"
          # 3. public ディレクトリもコピー
          cp -r ${{ env.WORKING_DIRECTORY }}/public "$DEPLOY_ROOT/"
          # 4. ディレクトリ構造の確認（デバッグ用）
          cd "$DEPLOY_ROOT"
          tree -a -L 2
          # 5. ZIPパッケージの作成
          zip -ryq ${{ env.WORKING_DIRECTORY }}/deployment.zip .

      # --- Step 7: Azure App Serviceへのデプロイ ---
      - name: "Deploy to Azure Web App"
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.FRONTEND_APP_SERVICE_NAME }}
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_9ACA2A907F9C4DF89ADE05588C89F2CE }}
          package: ${{ env.WORKING_DIRECTORY }}/deployment.zip
